---
- name: Deploy Real Estate Application on AWS EC2
  hosts: all
  become: yes

  vars:
    app_base: /home/ubuntu/Dream-properties
    backend_dir: "/home/ubuntu/Dream-properties/Real Estate Backend/real-estate"
    frontend_dir: /home/ubuntu/Dream-properties/real-estate-frontend

  tasks:
    # --- System Setup ---
    - name: Update apt cache and install base packages
      apt:
        update_cache: yes
        name:
          - git
          - curl
          - ca-certificates
          - gnupg
          - lsb-release
          - unzip
          - software-properties-common
          - apt-transport-https
          - nginx
        state: present

    # --- Install Docker and Maven ---
    - name: Install Docker and Maven
      apt:
        name:
          - docker.io
          - maven
        state: present
        update_cache: yes

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    # --- Install Node.js 18.x ---
    - name: Install Node.js 18.x
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        apt-get install -y nodejs
      args:
        executable: /bin/bash

    # --- Verify Versions ---
    - name: Display installed versions
      shell: |
        echo "Docker version: $(docker --version)"
        echo "Maven version: $(mvn -version | head -n 1)"
        echo "Node version: $(node -v)"
        echo "NPM version: $(npm -v)"
      register: version_output
      changed_when: false

    - debug:
        var: version_output.stdout_lines

    # --- Clone GitHub Repository ---
    - name: Clone latest code from GitHub
      git:
        repo: "https://github.com/neharika005/Dream-properties.git"
        dest: "{{ app_base }}"
        version: main
        force: yes

    # --- Build Backend ---
    - name: Build backend using Maven
      shell: |
        cd "{{ backend_dir }}"
        mvn clean package -DskipTests
      args:
        executable: /bin/bash

    # --- Build Frontend ---
    - name: Build Angular frontend
      shell: |
        cd "{{ frontend_dir }}"
        npm install
        npm run build -- --configuration production
      args:
        executable: /bin/bash

    # --- Docker Compose Deployment ---
    - name: Stop and rebuild Docker containers
      shell: |
        cd "{{ app_base }}"
        docker compose down || true
        docker compose up -d --build
      args:
        executable: /bin/bash

    - name: Verify running Docker containers
      shell: docker ps
      register: docker_ps
      changed_when: false

    - debug:
        var: docker_ps.stdout_lines

    # --- Nginx Reverse Proxy Setup ---
    - name: Create Nginx configuration for reverse proxy
      copy:
        dest: /etc/nginx/sites-available/real_estate.conf
        content: |
          server {
              listen 80;
              server_name _;

              location /api/ {
                  proxy_pass http://localhost:8080/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              location / {
                  root {{ frontend_dir }}/dist;
                  index index.html;
                  try_files $uri /index.html;
              }
          }

    - name: Enable custom Nginx site
      file:
        src: /etc/nginx/sites-available/real_estate.conf
        dest: /etc/nginx/sites-enabled/real_estate.conf
        state: link
        force: yes

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Reload Nginx daemon
      command: systemctl daemon-reload

    - name: Restart Nginx service
      service:
        name: nginx
        state: restarted
        enabled: yes

    - name: Verify Nginx status
      shell: systemctl status nginx --no-pager
      register: nginx_status
      changed_when: false

    - debug:
        var: nginx_status.stdout_lines
