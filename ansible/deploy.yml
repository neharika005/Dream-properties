---
- name: Deploy Real Estate application
  hosts: real_estate
  become: yes

  vars:
    project_dir: /home/ubuntu/Dream-properties
    backend_dir: "{{ project_dir }}/Real Estate Backend/real-estate"
    frontend_dir: "{{ project_dir }}/real-estate-frontend"
    mysql_container: real_estate_mysql
    backend_container: real_estate_backend
    frontend_container: real_estate_frontend
    docker_network: real_estate_network
    recreate_mysql: false   # set to true only if you need a clean MySQL
    mysql_root_password: root
    mysql_port: 3306
    backend_port: 8080
    frontend_port: 80

  tasks:
    - name: Ensure project directory exists
      file:
        path: "{{ project_dir }}"
        state: directory
        owner: ubuntu
        mode: '0755'

    - name: Pull latest source on remote (git pull or clone)
      git:
        repo: "https://github.com/neharika005/Dream-properties.git"
        dest: "{{ project_dir }}"
        version: main
        force: yes
        accept_hostkey: yes

    - name: Ensure docker network exists
      docker_network:
        name: "{{ docker_network }}"
        state: present

    - name: Ensure MySQL container is present (optional recreate)
      block:
        - name: Stop mysql container if exists
          docker_container:
            name: "{{ mysql_container }}"
            state: stopped
          when: recreate_mysql

        - name: Remove mysql container if exists
          docker_container:
            name: "{{ mysql_container }}"
            state: absent
          when: recreate_mysql

        - name: Run mysql container (if absent)
          docker_container:
            name: "{{ mysql_container }}"
            image: mysql:8
            env:
              MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
              MYSQL_DATABASE: real_estate_portal
            ports:
              - "{{ mysql_port }}:3306"
            volumes:
              - /home/ubuntu/mysql_data:/var/lib/mysql
            restart_policy: unless-stopped
            networks:
              - name: "{{ docker_network }}"
      when: recreate_mysql
      rescue:
        - debug:
            msg: "MySQL step skipped or failed; confirm container state manually."

    - name: Build backend docker image
      community.docker.docker_image:
        name: "{{ backend_container }}"
        tag: latest
        source: build
        build:
          path: "{{ backend_dir }}"
      environment:
        DOCKER_BUILDKIT: '1'

    - name: Stop and remove existing backend container (if present)
      docker_container:
        name: "{{ backend_container }}"
        state: absent
        force_kill: yes

    - name: Run backend container
      docker_container:
        name: "{{ backend_container }}"
        image: "{{ backend_container }}:latest"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ backend_port }}:8080"
        env:
          SPRING_DATASOURCE_URL: "jdbc:mysql://{{ mysql_container }}:3306/real_estate_portal"
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: "{{ mysql_root_password }}"
        networks:
          - name: "{{ docker_network }}"

    - name: Build frontend docker image
      community.docker.docker_image:
        name: "{{ frontend_container }}"
        tag: latest
        source: build
        build:
          path: "{{ frontend_dir }}"
      environment:
        DOCKER_BUILDKIT: '1'

    - name: Stop and remove existing frontend container (if present)
      docker_container:
        name: "{{ frontend_container }}"
        state: absent
        force_kill: yes

    - name: Run frontend container
      docker_container:
        name: "{{ frontend_container }}"
        image: "{{ frontend_container }}:latest"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ frontend_port }}:80"
        networks:
          - name: "{{ docker_network }}"

    - name: Wait for backend to be healthy
      uri:
        url: "http://localhost:{{ backend_port }}/actuator/health"
        method: GET
        status_code: 200
      register: health_check
      retries: 8
      delay: 5
      until: health_check.status == 200
      ignore_errors: yes
