---
- name: Deploy Real Estate Application
  hosts: all
  become: true
  vars:
    backend_dir: "/home/ubuntu/Dream-properties/Real Estate Backend/real-estate"
    backend_jar: "real-estate-0.0.1-SNAPSHOT.jar"
    frontend_dir: "/home/ubuntu/Dream-properties/real-estate-frontend/dist/real-estate-frontend/browser"
    nginx_conf: "/etc/nginx/sites-available/real_estate"
    mysql_container: "real_estate_mysql"
    backend_container: "real_estate_backend"

  tasks:

    # --- Update system packages ---
    - name: Update apt packages
      apt:
        update_cache: yes
        upgrade: yes

    # --- Install dependencies ---
    - name: Install required packages
      apt:
        name:
          - docker.io
          - docker-compose
          - nginx
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    # --- Stop old containers if any ---
    - name: Stop existing containers
      shell: |
        docker stop {{ backend_container }} {{ mysql_container }} || true
        docker rm {{ backend_container }} {{ mysql_container }} || true
      ignore_errors: yes

    # --- Copy backend JAR to server ---
    - name: Copy backend JAR to server
      copy:
        src: "{{ backend_dir }}/target/{{ backend_jar }}"
        dest: "/home/ubuntu/{{ backend_jar }}"
        remote_src: yes

    # --- Start MySQL container ---
    - name: Start MySQL container
      docker_container:
        name: "{{ mysql_container }}"
        image: mysql:8
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: realestate
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - "3306:3306"

    # --- Wait for MySQL to initialize ---
    - name: Wait for MySQL to be ready
      shell: |
        until docker exec {{ mysql_container }} mysqladmin ping -h "localhost" --silent; do
          echo "Waiting for MySQL..."
          sleep 5
        done
      retries: 10
      delay: 5
      register: mysql_ready
      changed_when: false

    # --- Start Backend container ---
    - name: Start backend container
      docker_container:
        name: "{{ backend_container }}"
        image: openjdk:17-jdk
        restart_policy: always
        command: ["java", "-jar", "/app/{{ backend_jar }}"]
        volumes:
          - "/home/ubuntu/{{ backend_jar }}:/app/{{ backend_jar }}"
        ports:
          - "8080:8080"
        env:
          SPRING_DATASOURCE_URL: "jdbc:mysql://{{ mysql_container }}:3306/realestate"
          SPRING_DATASOURCE_USERNAME: "user"
          SPRING_DATASOURCE_PASSWORD: "password"
        networks_cli_compatible: yes

    # --- Configure Nginx for frontend ---
    - name: Configure Nginx for frontend
      copy:
        dest: "{{ nginx_conf }}"
        content: |
          server {
              listen 80;
              server_name _;

              root {{ frontend_dir }};
              index index.html;

              location / {
                  try_files $uri $uri/ /index.html;
              }

              location /api/ {
                  proxy_pass http://localhost:8080/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
          }
      notify: Restart Nginx

    - name: Enable frontend site
      file:
        src: "{{ nginx_conf }}"
        dest: /etc/nginx/sites-enabled/real_estate
        state: link
      notify: Restart Nginx

    - name: Remove default Nginx config
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Restart Nginx

    # --- Verify backend container ---
    - name: Verify backend container running
      shell: docker ps | grep "{{ backend_container }}"
      register: backend_status
      failed_when: backend_status.rc != 0

    - name: Print backend container status
      debug:
        msg: "âœ… Backend container running:\n{{ backend_status.stdout }}"

    # --- Verify frontend served by Nginx ---
    - name: Verify frontend served by Nginx
      uri:
        url: http://localhost
        return_content: yes
      register: nginx_frontend
      failed_when: "'Welcome to nginx!' in nginx_frontend.content"
      retries: 5
      delay: 5
      until: nginx_frontend.status == 200

    - name: Print success message
      debug:
        msg: "ðŸŽ‰ Deployment completed successfully! Frontend & Backend are live."

  handlers:
    - name: Restart Nginx
      become: true
      service:
        name: nginx
        state: restarted
