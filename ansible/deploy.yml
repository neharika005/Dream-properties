- name: Deploy Real Estate application
  hosts: real_estate
  become: yes

  vars:
    project_dir: /home/ubuntu/Dream-properties
    backend_dir: "{{ project_dir }}/Real Estate Backend/real-estate"
    frontend_dir: "{{ project_dir }}/real-estate-frontend"
    mysql_container: real_estate_mysql
    backend_container: real_estate_backend
    frontend_container: real_estate_frontend
    docker_network: real_estate_network
    mysql_root_password: root
    mysql_port: 3306
    backend_port: 8080
    frontend_port: 80

  tasks:
    - name: Ensure project directory exists
      file:
        path: "{{ project_dir }}"
        state: directory
        owner: ubuntu
        mode: '0755'

    - name: Pull latest source on remote (git pull or clone)
      git:
        repo: "https://github.com/neharika005/Dream-properties.git"
        dest: "{{ project_dir }}"
        version: main
        force: yes
        accept_hostkey: yes

    - name: Ensure docker network exists
      docker_network:
        name: "{{ docker_network }}"
        state: present

    # MYSQL PART REMAINS AS IN YOUR PLAYBOOK

    - name: Clean backend target directory (remove old build artifacts)
      file:
        path: "{{ backend_dir }}/target"
        state: absent

    - name: Run Maven clean package for backend
      shell: mvn clean package -DskipTests
      args:
        chdir: "{{ backend_dir }}"

    - name: Ensure backend jar exists (fail if not built)
      stat:
        path: "{{ backend_dir }}/target/*.jar"
      register: backend_jar

    - name: Fail if backend jar was not built
      fail:
        msg: "Backend artifact was not built. Check Maven output for errors."
      when: not backend_jar.stat.exists

    - name: Stop and remove existing backend container (if present)
      docker_container:
        name: "{{ backend_container }}"
        state: absent
        force_kill: yes

    - name: Build backend docker image (always latest source and artifact)
      community.docker.docker_image:
        name: "{{ backend_container }}"
        tag: latest
        source: build
        build:
          path: "{{ backend_dir }}"
      environment:
        DOCKER_BUILDKIT: '1'

    - name: Run backend container
      docker_container:
        name: "{{ backend_container }}"
        image: "{{ backend_container }}:latest"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ backend_port }}:8080"
        env:
          SPRING_DATASOURCE_URL: "jdbc:mysql://{{ mysql_container }}:3306/real_estate_portal"
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: "{{ mysql_root_password }}"
        networks:
          - name: "{{ docker_network }}"

    - name: Build Angular frontend (for header, UI, admin page updates)
      shell: npm install && npm run build -- --configuration production
      args:
        chdir: "{{ frontend_dir }}"

    - name: Build frontend docker image (after build)
      community.docker.docker_image:
        name: "{{ frontend_container }}"
        tag: latest
        source: build
        build:
          path: "{{ frontend_dir }}"
      environment:
        DOCKER_BUILDKIT: '1'

    - name: Stop and remove existing frontend container (if present)
      docker_container:
        name: "{{ frontend_container }}"
        state: absent
        force_kill: yes

    - name: Run frontend container
      docker_container:
        name: "{{ frontend_container }}"
        image: "{{ frontend_container }}:latest"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ frontend_port }}:80"
        networks:
          - name: "{{ docker_network }}"

    # NGINX HANDLERS REMAIN AS IN YOUR PLAYBOOK

  handlers:
    - name: Reload systemd daemon
      command: systemctl daemon-reload
      become: yes

    - name: Restart nginx
      service:
        name: nginx
        state: restarted
      become: yes
