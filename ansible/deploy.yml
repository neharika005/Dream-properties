---
- name: Deploy Real Estate Application on AWS EC2
  hosts: all
  become: yes

  vars:
    app_base: /home/ubuntu/Dream-properties
    backend_dir: /home/ubuntu/Dream-properties/Real-Estate-Backend
    frontend_dir: /home/ubuntu/Dream-properties/real-estate-frontend

  tasks:

    # --- System Setup ---
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required packages
      apt:
        name:
          - curl
          - ca-certificates
          - gnupg
          - lsb-release
          - unzip
          - software-properties-common
          - apt-transport-https
          - nginx
        state: present
        update_cache: yes

    # --- Install Docker and Maven ---
    - name: Install Docker and Maven
      apt:
        name:
          - docker.io
          - maven
        state: present
        update_cache: yes

    - name: Ensure Docker service is started and enabled
      service:
        name: docker
        state: started
        enabled: yes

    # --- Install Node.js ---
    - name: Install Node.js 18.x from NodeSource
      shell: |
        curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
        apt-get install -y nodejs
      args:
        executable: /bin/bash

    # --- Verify Versions ---
    - name: Check installed versions
      shell: |
        docker --version
        mvn -version
        node -v
        npm -v
      register: version_check
      changed_when: false

    - debug:
        var: version_check.stdout_lines

    # --- Application Setup ---
    - name: Clone latest code from GitHub
      git:
        repo: "https://github.com/neharika005/Dream-properties.git"
        dest: "{{ app_base }}"
        version: main
        force: yes

    - name: Build backend application
      shell: |
        cd "{{ backend_dir }}"
        mvn clean package -DskipTests
      args:
        executable: /bin/bash

    - name: Build frontend application
      shell: |
        cd "{{ frontend_dir }}"
        npm install
        npm run build -- --configuration production
      args:
        executable: /bin/bash

    # --- Docker Compose Deployment ---
    - name: Copy Docker Compose file
      copy:
        src: "{{ backend_dir }}/docker-compose.yml"
        dest: "{{ app_base }}/docker-compose.yml"
        remote_src: yes

    - name: Build and start Docker containers
      shell: |
        cd {{ app_base }}
        docker compose down
        docker compose up -d --build
      args:
        executable: /bin/bash

    - name: Verify running containers
      shell: docker ps
      register: docker_ps
      changed_when: false

    - debug:
        var: docker_ps.stdout_lines

    # --- Nginx Reverse Proxy Configuration ---
    - name: Create Nginx configuration file
      copy:
        dest: /etc/nginx/sites-available/real_estate.conf
        content: |
          server {
              listen 80;
              server_name _;

              location /api/ {
                  proxy_pass http://localhost:8080/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              location / {
                  root {{ frontend_dir }}/dist;
                  index index.html;
                  try_files $uri /index.html;
              }
          }

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/real_estate.conf
        dest: /etc/nginx/sites-enabled/real_estate.conf
        state: link
        force: yes

    - name: Remove default Nginx site if exists
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Restart Nginx service
      service:
        name: nginx
        state: restarted
        enabled: yes

    - name: Verify Nginx status
      shell: systemctl status nginx --no-pager
      register: nginx_status
      changed_when: false

    - debug:
        var: nginx_status.stdout_lines
