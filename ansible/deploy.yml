---
- name: Deploy Dream Properties Application
  hosts: all
  become: yes
  vars:
    project_root: /home/ubuntu/Dream-properties
    backend_dir: "{{ project_root }}/Real Estate Backend/real-estate"
    frontend_dist: "{{ project_root }}/real-estate-frontend/dist/real-estate-frontend/browser"
    mysql_container_name: real_estate_mysql
    backend_container_name: real_estate_backend
    backend_image_name: real_estate_backend
    mysql_root_password: root
    mysql_database: realestate
    backend_port: 8080
    frontend_port: 80

  tasks:
    # --- Ensure prerequisites ---
    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Install required dependencies
      apt:
        name:
          - docker.io
          - nginx
          - python3-pip
        state: present

    - name: Ensure Docker service is running
      service:
        name: docker
        state: started
        enabled: yes

    - name: Ensure Nginx service is running
      service:
        name: nginx
        state: started
        enabled: yes

    # --- Deploy MySQL ---
    - name: Start MySQL container
      docker_container:
        name: "{{ mysql_container_name }}"
        image: mysql:8
        state: started
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
          MYSQL_DATABASE: "{{ mysql_database }}"
        ports:
          - "3306:3306"

    # --- Deploy Backend ---
    - name: Copy backend JAR to server
      copy:
        src: "{{ backend_dir }}/target/real-estate-0.0.1-SNAPSHOT.jar"
        dest: "{{ backend_dir }}/app.jar"
        mode: '0755'

    - name: Build backend Docker image
      community.docker.docker_image:
        name: "{{ backend_image_name }}"
        build:
          path: "{{ backend_dir }}"
        source: build

    - name: Stop existing backend container (if any)
      docker_container:
        name: "{{ backend_container_name }}"
        state: absent

    - name: Run backend container
      docker_container:
        name: "{{ backend_container_name }}"
        image: "{{ backend_image_name }}"
        state: started
        restart_policy: always
        ports:
          - "{{ backend_port }}:8080"
        env:
          SPRING_DATASOURCE_URL: "jdbc:mysql://{{ ansible_default_ipv4.address }}:3306/{{ mysql_database }}"
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: "{{ mysql_root_password }}"

    # --- Deploy Frontend ---
    - name: Remove default Nginx config if it exists
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Create Nginx site configuration for frontend
      copy:
        dest: /etc/nginx/sites-available/real_estate_frontend
        content: |
          server {
              listen 80;
              server_name _;

              root {{ frontend_dist }};
              index index.html;

              location / {
                  try_files $uri $uri/ /index.html;
              }
          }

    - name: Enable Nginx site configuration
      file:
        src: /etc/nginx/sites-available/real_estate_frontend
        dest: /etc/nginx/sites-enabled/real_estate_frontend
        state: link
        force: yes

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test
      failed_when: "'successful' not in nginx_test.stdout"

    - name: Restart Nginx service
      service:
        name: nginx
        state: restarted

    # --- Verify Backend ---
    - name: Verify backend API health
      uri:
        url: "http://localhost:{{ backend_port }}/actuator/health"
        method: GET
        status_code: 200
      register: backend_health
      retries: 5
      delay: 10
      until: backend_health.status == 200

    - name: Show backend container status
      command: docker ps --filter "name={{ backend_container_name }}"
      register: backend_status

    - debug:
        msg: "✅ Backend container running:\n{{ backend_status.stdout }}"

    # --- Verify Frontend ---
    - name: Verify frontend served by Nginx
      uri:
        url: "http://localhost"
        return_content: yes
      register: frontend_check
      failed_when: "'Welcome to nginx' in frontend_check.content"
      retries: 5
      delay: 5

    - debug:
        msg: "✅ Frontend served successfully via Nginx."
