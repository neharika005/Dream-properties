---
- name: Deploy Real Estate Application (Backend + Frontend + MySQL + Nginx)
  hosts: real_estate
  become: yes

  vars:
    project_root: /home/ubuntu/Dream-properties
    backend_dir: "{{ project_root }}/Real Estate Backend/real-estate"
    frontend_dir: "{{ project_root }}/real-estate-frontend"
    mysql_container: real_estate_mysql
    backend_container: real_estate_backend
    frontend_container: real_estate_frontend
    mysql_db: real_estate_portal
    mysql_user: root
    mysql_password: root
    network_name: real_estate_net

  tasks:
    # ------------------------------------------------------------
    # 1. Ensure Docker & Nginx Installed
    # ------------------------------------------------------------
    - name: Ensure Docker and Nginx are installed
      apt:
        name:
          - docker.io
          - nginx
        state: present
        update_cache: yes

    - name: Ensure Docker and Nginx services are running
      service:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - docker
        - nginx

    # ------------------------------------------------------------
    # 2. Create Docker network (shared by all containers)
    # ------------------------------------------------------------
    - name: Create dedicated Docker network
      community.docker.docker_network:
        name: "{{ network_name }}"
        state: present

    # ------------------------------------------------------------
    # 3. MySQL Container
    # ------------------------------------------------------------
    - name: Run MySQL container
      community.docker.docker_container:
        name: "{{ mysql_container }}"
        image: mysql:8
        restart_policy: always
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_password }}"
          MYSQL_DATABASE: "{{ mysql_db }}"
        ports:
          - "3306:3306"
        networks:
          - name: "{{ network_name }}"
        volumes:
          - mysql_data:/var/lib/mysql

    # ------------------------------------------------------------
    # 4. Wait for MySQL to be ready
    # ------------------------------------------------------------
    - name: Wait for MySQL to initialize
      shell: |
        until docker exec {{ mysql_container }} mysqladmin ping -u{{ mysql_user }} -p{{ mysql_password }} --silent; do
          echo "Waiting for MySQL to start..."
          sleep 5
        done
      args:
        executable: /bin/bash

    # ------------------------------------------------------------
    # 5. Load schema and data into MySQL
    # ------------------------------------------------------------
    - name: Import schema.sql into MySQL
      shell: >
        docker exec -i {{ mysql_container }} mysql -u{{ mysql_user }} -p{{ mysql_password }}
        {{ mysql_db }} < "{{ backend_dir }}/src/main/resources/schema.sql"
      args:
        executable: /bin/bash

    - name: Import data.sql into MySQL
      shell: >
        docker exec -i {{ mysql_container }} mysql -u{{ mysql_user }} -p{{ mysql_password }}
        {{ mysql_db }} < "{{ backend_dir }}/src/main/resources/data.sql"
      args:
        executable: /bin/bash

    # ------------------------------------------------------------
    # 6. Backend Container
    # ------------------------------------------------------------
    - name: Build and run backend container
      community.docker.docker_container:
        name: "{{ backend_container }}"
        image: openjdk:17-jdk
        restart_policy: always
        working_dir: /app
        volumes:
          - "{{ backend_dir }}:/app"
        command: >
          bash -c "chmod +x ./mvnw &&
          ./mvnw clean package -DskipTests &&
          java -jar target/*.jar"
        ports:
          - "8080:8080"
        networks:
          - name: "{{ network_name }}"
        depends_on:
          - "{{ mysql_container }}"

    # ------------------------------------------------------------
    # 7. Frontend (Nginx) Container
    # ------------------------------------------------------------
    - name: Run frontend container
      community.docker.docker_container:
        name: "{{ frontend_container }}"
        image: nginx:alpine
        restart_policy: always
        volumes:
          - "{{ frontend_dir }}/dist/real-estate-frontend/browser:/usr/share/nginx/html"
        ports:
          - "4200:80"
        networks:
          - name: "{{ network_name }}"

    # ------------------------------------------------------------
    # 8. Configure Nginx Reverse Proxy on Host
    # ------------------------------------------------------------
    - name: Configure Nginx for Real Estate app
      copy:
        dest: /etc/nginx/sites-available/real_estate
        content: |
          server {
              listen 80;
              server_name _;

              root /home/ubuntu/Dream-properties/real-estate-frontend/dist/real-estate-frontend/browser;
              index index.html;

              location / {
                  try_files $uri $uri/ /index.html;
              }

              location /api/ {
                  proxy_pass http://localhost:8080/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              }
          }

    - name: Enable Nginx site and reload
      shell: |
        ln -sf /etc/nginx/sites-available/real_estate /etc/nginx/sites-enabled/real_estate
        nginx -t && systemctl reload nginx
      args:
        executable: /bin/bash

volumes:
  mysql_data:
