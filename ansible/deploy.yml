- name: Deploy Real Estate application
  hosts: real_estate
  become: yes

  vars:
    project_dir: /home/ubuntu/Dream-properties
    backend_dir: "{{ project_dir }}/Real Estate Backend/real-estate"
    frontend_dir: "{{ project_dir }}/real-estate-frontend"
    mysql_container: real_estate_mysql
    backend_container: real_estate_backend
    frontend_container: real_estate_frontend
    docker_network: real_estate_network
    mysql_root_password: root
    mysql_port: 3306
    backend_port: 8080
    frontend_port: 80

  tasks:
    - name: Ensure project directory exists
      file:
        path: "{{ project_dir }}"
        state: directory
        owner: ubuntu
        mode: '0755'

    - name: Pull latest source on remote (git pull or clone)
      git:
        repo: "https://github.com/neharika005/Dream-properties.git"
        dest: "{{ project_dir }}"
        version: main
        force: yes
        accept_hostkey: yes

    - name: Ensure Docker and dependencies are installed
      apt:
        name:
          - docker.io
          - docker-compose
          - maven
          - nodejs
          - npm
        state: present
        update_cache: yes

    - name: Ensure docker network exists
      community.docker.docker_network:
        name: "{{ docker_network }}"
        state: present

    # --- MySQL container setup ---
    - name: Ensure MySQL container is running
      community.docker.docker_container:
        name: "{{ mysql_container }}"
        image: mysql:8
        state: started
        restart_policy: unless-stopped
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
          MYSQL_DATABASE: real_estate_portal
        ports:
          - "{{ mysql_port }}:3306"
        volumes:
          - /home/ubuntu/mysql_data:/var/lib/mysql
        networks:
          - name: "{{ docker_network }}"

    # --- Backend build ---
    - name: Clean backend target directory
      file:
        path: "{{ backend_dir }}/target"
        state: absent

    - name: Run Maven clean package for backend
      shell: mvn clean package -DskipTests
      args:
        chdir: "{{ backend_dir }}"

    - name: Ensure backend JAR was built
      stat:
        path: "{{ backend_dir }}/target/*.jar"
      register: backend_jar

    - name: Fail if backend JAR not built
      fail:
        msg: "Backend JAR not found. Check Maven build logs."
      when: not backend_jar.stat.exists

    - name: Stop and remove existing backend container
      community.docker.docker_container:
        name: "{{ backend_container }}"
        state: absent
        force_kill: yes

    - name: Build backend Docker image
      community.docker.docker_image:
        name: "{{ backend_container }}"
        tag: latest
        source: build
        build:
          path: "{{ backend_dir }}"
      environment:
        DOCKER_BUILDKIT: '1'

    - name: Run backend container
      community.docker.docker_container:
        name: "{{ backend_container }}"
        image: "{{ backend_container }}:latest"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ backend_port }}:8080"
        env:
          SPRING_DATASOURCE_URL: "jdbc:mysql://{{ mysql_container }}:3306/real_estate_portal"
          SPRING_DATASOURCE_USERNAME: root
          SPRING_DATASOURCE_PASSWORD: "{{ mysql_root_password }}"
        networks:
          - name: "{{ docker_network }}"

    # --- Frontend build ---
    - name: Build Angular frontend
      shell: npm install && npm run build -- --configuration production
      args:
        chdir: "{{ frontend_dir }}"

    - name: Stop and remove existing frontend container
      community.docker.docker_container:
        name: "{{ frontend_container }}"
        state: absent
        force_kill: yes

    - name: Build frontend Docker image
      community.docker.docker_image:
        name: "{{ frontend_container }}"
        tag: latest
        source: build
        build:
          path: "{{ frontend_dir }}"
      environment:
        DOCKER_BUILDKIT: '1'

    - name: Run frontend container
      community.docker.docker_container:
        name: "{{ frontend_container }}"
        image: "{{ frontend_container }}:latest"
        state: started
        restart_policy: unless-stopped
        ports:
          - "{{ frontend_port }}:80"
        networks:
          - name: "{{ docker_network }}"

    # --- Nginx SPA routing setup (optional) ---
    - name: Ensure Nginx SPA routing (index.html fallback)
      block:
        - name: Check if Nginx is installed
          command: nginx -v
          register: nginx_check
          ignore_errors: yes

        - name: Add SPA fallback if Nginx exists
          lineinfile:
            path: /etc/nginx/sites-available/default
            regexp: '^\s*try_files'
            line: '        try_files $uri $uri/ /index.html;'
          when: nginx_check.rc == 0
          notify:
            - Reload systemd daemon
            - Restart nginx
      rescue:
        - debug:
            msg: "Nginx not found â€” skipping SPA routing configuration."

  handlers:
    - name: Reload systemd daemon
      command: systemctl daemon-reload
      become: yes

    - name: Restart nginx
      service:
        name: nginx
        state: restarted
      become: yes
